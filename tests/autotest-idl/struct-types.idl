/*
 * tests/struct-types.idl -- struct type test suite
 * Copyright 2010  Kalle A. Sandström <ksandstr@iki.fi>
 *
 * This file is part of µiX.
 *
 * µiX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * µiX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with µiX.  If not, see <http://www.gnu.org/licenses/>.
 */


/* AUTOTEST: ./muidl -D __TEST__=%t -I idl -I share/idl %n */

#include <muidl.idl>

#include "l4x2.idl"
#include "posix-base.idl"


#define TYPE_CONSUMER(name) \
	interface name ## _test_consumer { \
		void foo(inout name parameter); \
	}


module StructTypesSuite
{

typedef long mod_is_not_empty;

/* TEST 0: small (sub-word) types in a struct
 * expected: success
 */
#if __TEST__ == 0
struct SmallTypes {
	octet first;
	short second;
	boolean third;
	unsigned short fourth;
};

TYPE_CONSUMER(SmallTypes);
#endif

/* TEST 1: word-size types in a struct
 * expected: success
 */
#if __TEST__ == 1
struct WordTypes {
	long first;
	unsigned long second;
	wchar third;
	/* TODO: test float also! */
	/* TODO: and long long, unsigned long long for 64-bit targets! */
};

TYPE_CONSUMER(WordTypes);
#endif

/* TEST 2: native types in a struct
 * expected: success
 */
#if __TEST__ == 2
struct NativeTypes {
	L4X2::word first;
	L4X2::Fpage second;
	L4X2::MapGrantItem third;
};

TYPE_CONSUMER(NativeTypes);
#endif

/* TEST 3: super-word types in a struct, including other structs
 * expected: success
 */
#if __TEST__ == 3
struct Sub {
	octet first;
	short second;
	short third;
	long fourth;
	boolean fifth;
};

struct LargeTypes {
	long long first;
	unsigned long long second;
	Sub third;
};

TYPE_CONSUMER(LargeTypes);
#endif

/* TEST 4: sub-word struct members in a struct
 * expected: success
 */
#if __TEST__ == 4
struct small {
	octet first;
	boolean second, third, fourth;
	octet fifth;
};

interface SmallTypes {
	void foo(in small first);
	void bar(out small first);
	void foo_bar(inout small first);
};
#endif

/* TEST 5: struct type inside an interface (coverage)
 * expected: success
 */
#if __TEST__ == 5
interface StructParent {
	struct sub {
		long first;
		octet second;
	};

	void operation(in sub parameter);
};
#endif

};


/* TEST 1000: struct type outside a module declaration
 * expected: success
 */
struct LooseStruct {
	long first;
	octet second;
};

TYPE_CONSUMER(LooseStruct);
