/*
 * verify_provoke.idl -- provoke verification failures in µidl
 * Copyright 2009, 2010  Kalle A. Sandström <ksandstr@iki.fi>
 *
 * This file is part of µiX.
 *
 * µiX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * µiX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with µiX.  If not, see <http://www.gnu.org/licenses/>.
 */

/* AUTOTEST: ./muidl -D __TEST__=%t -I idl -I share %n */

#include "muidl.idl"
#include "l4x2.idl"
#include "posix-base.idl"


#define CONSUME_TYPE(__t) \
	void operation(in __t foo); \
	void operation_2(out __t bar); \
	void operation_3(inout __t oof)

module MuidlVerifyProvoke
{

interface AutoTestCases
{
/* TEST 0: succeed
 * expected: success
 */
#if __TEST__ == 0 || !defined(__TEST__)
	[Label(0xface)]		/* (that's your mum's name.) */
	void placeholder();
#endif


/* test cases for supported_types_only(), IDLN_INTERFACE check */

/* TEST 1: struct with a string member
 * expected: fail
 */
#if __TEST__ == 1
	struct string_member {
		string<30> nevermind;
	};
#endif

/* TEST 2: union with a string member
 * expected: fail
 */
#if __TEST__ == 2
	union not_permissible switch(short) {
		case 0: long foo;
		case 1: octet bar;
		case 2: string<30> murder;
	};
#endif

/* TEST 3: interface type in parameter declaration
 * expected: fail
 */
#if __TEST__ == 3
	[Label(0xdead)]
	void forbidden_type_in_param_dcl(in AutoTestCases parameter);
#endif

/* TEST 4: interface type in struct declaration
 * expected: fail
 */
#if __TEST__ == 4
	struct multidim_array_garbage {
		AutoTestCases i_sure_am_dim_hyuck_hyuck[2];
	};
#endif

/* TEST 5: interface type in op_dcl return value
 * expected: failure
 */
#if __TEST__ == 5
	[Label(0xdead)]
	AutoTestCases iface_returning_operation(in long foo, in word bar);
#endif

/* TEST 6: interface type in sequence type
 * expected: failure
 */
#if __TEST__ == 6
	typedef sequence<AutoTestCases, 20> exseq;
	struct blah {
		exseq z;
		long foo;
	};
#endif

/* TEST 7: interface type in typedef
 * expected: failure
 */
#if __TEST__ == 7
	typedef AutoTestCases exarray[20];
#endif

/* TEST 8: reserved word in operation name
 * expected: failure
 */
#if __TEST__ == 8
	void register(in long something);
#endif

/* TEST 9: any as parameter type
 * expected: failure
 */
#if __TEST__ == 9
	void object_parameter(in any parameter_name_whoop_whoop_golly);
#endif

/* TEST 10: an unbounded sequence appears
 * expected: failure
 */
#if __TEST__ == 10
	typedef sequence<char> quasi_string;
	void whatever_the_butt(in quasi_string not_a_real_string_guys);
#endif

/* TEST 11: unbounded strings
 * expected: failure
 */
#if __TEST__ == 11
	string this_one_will_fail();
#endif

/* TEST 12: unbounded wide strings
 * expected: failure
 */
#if __TEST__ == 12
	wstring this_one_is_not_looking_so_hot_either();
#endif

/* TEST 13: multidimensional arrays
 * expected: failure
 */
#if __TEST__ == 13
	typedef long john[2][6];
	oneway void asbestos(in john smith);
#endif

/* TEST 14: union type with a non-valuetype discriminator
 * expected: failure
 */
#if __TEST__ == 14
	struct rigid {
		long what;
	};

	union onion switch (rigid) {
		default: boolean value;
	};

	oneway void blah(in onion whatever);
#endif

/* TEST 15: an unknown native type in an op parameter
 * expected: failure
 */
#if __TEST__ == 15
	native not_exist;
	CONSUME_TYPE(not_exist);
#endif

/* TEST 16: an unknown native type in a struct declaration
 * expected: failure
 */
#if __TEST__ == 16
	native not_exist;
	struct invalid {
		not_exist field;
		long another;
	};
	CONSUME_TYPE(invalid);
#endif

/* TEST 17: a mapping type in a struct (non-rigid)
 * expected: failure
 */
#if __TEST__ == 17
	struct invalid {
		muidl::mapping field;
		long another;
	};
	CONSUME_TYPE(invalid);
#endif

/* TEST 18: an op decl with two in-mappings
 * expected: failure
 */
#if __TEST__ == 18
	oneway void thingie(
		in muidl::mapping foo,
		in long bar,
		in muidl::mapping poit);
#endif

/* TEST 19: an op decl with two out-mappings
 * expected: failure
 */
#if __TEST__ == 19
	void whatsit(
		out muidl::mapping foo,
		in long bar,
		inout muidl::mapping poit);
#endif

};


interface ExplicitMRPropertyNoIfaceLabel
{
	void filler();

/* TEST 100: explicit MR spec over the tag register
 * expected: failure
 */
#if __TEST__ == 100
	void ex_mrspec_over_tag(
		[MR(0)] in long something);
#endif

/* TEST 101: explicit mr spec over another
 * expected: failure
 */
#if __TEST__ == 101
	void ex_mrspec_over_self(
		[MR(1)] in long something,
		[MR(2)] in short whatever,
		[MR(1)] in octet corn_flakes_zor);
#endif

/* TEST 102: explicit mr spec out of range (positive)
 * expected: failure
 */
#if __TEST__ == 102
	void ex_mrspec_range_pos([MR(64)] in long somewhat);
#endif

/* TEST 103: explicit mr spec out of range (negative)
 * expected: failure
 */
#if __TEST__ == 103
	void ex_mrspec_range_neg([MR(-2)] in long somewhat);
#endif

};


[IfaceLabel(0xc0de)]
interface ExplicitMRPropertyIfaceLabel
{
	void filler();

/* TEST 120: explicit mr spec over the sublabel
 * expected: failure
 */
#if __TEST__ == 120
	void ex_mrspec_over_sublabel([MR(1)] in long teh_teh);
#endif
};


};
