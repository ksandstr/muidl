/*
 * test.idl -- general test-case playground
 * Copyright 2009, 2010  Kalle A. Sandström <ksandstr@iki.fi>
 *
 * This file is part of µiX.
 *
 * µiX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * µiX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with µiX.  If not, see <http://www.gnu.org/licenses/>.
 */


/* AUTOTEST: ./muidl -D __TEST__=%t -I idl %n */

#include "l4x2.idl"
#include "posix-base.idl"


module register
{

typedef L4X2::word word;

const long MAX_LONGSEQ_LEN = 16;
const char SOME_CHAR_OR_OTHER = 'q';
const boolean A_BOOLEAN = FALSE;
const string LUPINE_BRAVERY = "piss lightning\n\tshit success";

struct unrelated_to_muix
{
	long foo;
	string<20> bar;
	octet zort;
	unsigned short blammo;
	octet something[23], whatever_else;
};

[StubPrefix(__explicitprefix)]
interface Example
{
	/* these only exist for test's sake, move them out at some point */
	[Label(0xface)]
	void void_operation(in word foo, in word bar)
		raises(Posix::Errno);

	[Label(0xfacf)]
	unsigned short ushort_operation(in word foo, in unsigned short mask)
		raises(Posix::Errno);

	[Label(0xfad0)]
	octet octet_operation(in word foo, inout octet mask)
		raises(Posix::Errno);

	[Label(0xfad1)]
	void outsy_operation(in word foo, out word bar);


	typedef sequence<octet, 64> byte_seq;
	typedef sequence<short, 25> short_seq;
	typedef sequence<long, MAX_LONGSEQ_LEN> long_seq;

	[Label(0xabcd)]
	long multi_sequence_call(
		in short_seq first,
		in byte_seq second,
		out long_seq first_out,
		inout long_seq the_inout);

/* TEST 1: oneway operation with non-void return type
 * expected: failure
 */
#if __TEST__ == 1
	[Label(0xdead)]
	oneway short oneway_short_operation();
#endif

/* TEST 2: oneway operation that raises an exception
 * expected: failure
 */
#if __TEST__ == 2
	[Label(0xdead)]
	oneway void oneway_void_operation_that_raises()
		raises(Posix::Errno);
#endif

};

};
