
/* AUTOTEST: ./muidl -D __TEST__=%t -I idl %n */

#include "l4x2.idl"
#include "posix-base.idl"


module register
{

typedef L4X2::word word;

struct unrelated_to_muix
{
	long foo;
	string<20> bar;
	octet zort;
	unsigned short blammo;
	octet something[23], whatever_else;
};

[StubPrefix(__explicitprefix)]
interface Example
{
	/* these only exist for test's sake, move them out at some point */
	[Label(0xface)]
	void void_operation(in word foo, in word bar)
		raises(Posix::Errno);

	[Label(0xfacf)]
	unsigned short ushort_operation(in word foo, in unsigned short mask)
		raises(Posix::Errno);

	[Label(0xfad0)]
	octet octet_operation(in word foo, inout octet mask)
		raises(Posix::Errno);

	[Label(0xfad1)]
	void outsy_operation(in word foo, out word bar);


	typedef sequence<octet, 64> byte_seq;
	typedef sequence<short, 25> short_seq;
	typedef sequence<long, 16> long_seq;

	[Label(0xabcd)]
	long multi_sequence_call(
		in short_seq first,
		in byte_seq second,
		out long_seq first_out,
		inout long_seq the_inout);

/* TEST 1: oneway operation with non-void return type
 * expected: failure
 */
#if __TEST__ == 1
	[Label(0xdead)]
	oneway short oneway_short_operation();
#endif

/* TEST 2: oneway operation that raises an exception
 * expected: failure
 */
#if __TEST__ == 2
	[Label(0xdead)]
	oneway void oneway_void_operation_that_raises()
		raises(Posix::Errno);
#endif


/* test cases for supported_types_only(), IDLN_INTERFACE check */

/* TEST 3: interface type in parameter declaration
 * expected: fail
 */
#if __TEST__ == 3
	[Label(0xdead)]
	void forbidden_type_in_param_dcl(in Example parameter);
#endif

/* TEST 4: interface type in struct declaration
 * expected: fail
 */
#if __TEST__ == 4
	struct multidim_array_garbage {
		Example i_sure_am_dim_hyuck_hyuck[2];
	};
#endif

/* TEST 5: interface type in op_dcl return value
 * expected: failure
 */
#if __TEST__ == 5
	[Label(0xdead)]
	Example iface_returning_operation(in long foo, in word bar);
#endif

/* TEST 6: interface type in sequence type
 * expected: failure
 */
#if __TEST__ == 6
	typedef sequence<Example, 20> exseq;
	struct blah {
		exseq z;
		long foo;
	};
#endif

/* TEST 7: interface type in typedef
 * expected: failure
 */
#if __TEST__ == 7
	typedef Example exarray[20];
#endif

/* TEST 8: reserved word in operation name
 * expected: failure
 */
#if __TEST__ == 8
	void register(in long something);
#endif

};

};
